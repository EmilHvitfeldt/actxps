[{"path":"https://mattheaphy.github.io/actxps/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Matt Heaphy Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mattheaphy.github.io/actxps/articles/actxps.html","id":"simulated-data-set","dir":"Articles","previous_headings":"","what":"Simulated data set","title":"Getting started with actxps","text":"actxps package includes data frame containing simulated census data theoretical deferred annuity product optional guaranteed income rider. grain data one row per policy. data includes 3 policy statuses: Active, Death, Surrender. Let’s assume ’re interested calculating probability surrender one policy year. simply calculate proportion policies surrendered status represent annualized surrender rate.","code":"library(actxps) library(dplyr)  census_dat #> # A tibble: 20,000 × 11 #>    pol_num status   issue_date inc_g…¹ qual    age product gender wd_age pol_val #>      <int> <fct>    <date>     <lgl>   <lgl> <int> <fct>   <fct>   <int>   <dbl> #>  1       1 Active   2014-12-17 TRUE    FALSE    56 b       F          77     370 #>  2       2 Surrend… 2007-09-24 FALSE   FALSE    71 a       F          71     708 #>  3       3 Active   2012-10-06 FALSE   TRUE     62 b       F          63     466 #>  4       4 Surrend… 2005-06-27 TRUE    TRUE     62 c       M          62     485 #>  5       5 Active   2019-11-22 FALSE   FALSE    62 c       F          67     978 #>  6       6 Active   2018-09-01 FALSE   TRUE     77 a       F          77    1288 #>  7       7 Active   2011-07-23 TRUE    TRUE     63 a       M          65    1046 #>  8       8 Active   2005-11-08 TRUE    TRUE     58 a       M          58    1956 #>  9       9 Active   2010-09-19 FALSE   FALSE    53 c       M          64    2165 #> 10      10 Active   2012-05-25 TRUE    FALSE    61 b       M          73     609 #> # … with 19,990 more rows, 1 more variable: term_date <date>, and abbreviated #> #   variable name ¹​inc_guar (status_counts <- table(census_dat$status)) #>  #>    Active     Death Surrender  #>     15212      1816      2972 # incorrect prop.table(status_counts) #>  #>    Active     Death Surrender  #>    0.7606    0.0908    0.1486"},{"path":"https://mattheaphy.github.io/actxps/articles/actxps.html","id":"creating-exposed-data","dir":"Articles","previous_headings":"","what":"Creating exposed data","title":"Getting started with actxps","text":"order calculate annual surrender rates, need break policy multiple records. one row per policy per year. expose() family functions used perform transformation. functions create exposed_df objects, type data frame additional attributes related experience study. Now data “exposed” policy year, observed annual surrender probability can calculated : default, expose() function calculates exposures policy year. can also accomplished function expose_py(). implementations expose() include: expose_cy = exposures calendar year expose_cq = exposures calendar quarter expose_cm = exposures calendar month expose_cw = exposures calendar week expose_pq = exposures policy quarter expose_pm = exposures policy month expose_pw = exposures policy week See vignette(\"exposures\") details exposure calculations.","code":"exposed_data <- expose(census_dat, end_date = \"2019-12-31\",                        target_status = \"Surrender\")  exposed_data #> Exposure data #>  #>  Exposure type: policy_year  #>  Target status: Surrender  #>  Study range: 1900-01-01 to 2019-12-31  #>  #> # A tibble: 141,252 × 15 #>    pol_num status issue_date inc_guar qual    age product gender wd_age pol_val #>  *   <int> <fct>  <date>     <lgl>    <lgl> <int> <fct>   <fct>   <int>   <dbl> #>  1       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  2       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  3       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  4       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  5       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  6       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  7       2 Active 2007-09-24 FALSE    FALSE    71 a       F          71     708 #>  8       2 Active 2007-09-24 FALSE    FALSE    71 a       F          71     708 #>  9       2 Active 2007-09-24 FALSE    FALSE    71 a       F          71     708 #> 10       2 Active 2007-09-24 FALSE    FALSE    71 a       F          71     708 #> # … with 141,242 more rows, and 5 more variables: term_date <date>, #> #   pol_yr <int>, pol_date_yr <date>, pol_date_yr_end <date>, exposure <dbl> sum(exposed_data$status == \"Surrender\") / sum(exposed_data$exposure) #> [1] 0.02163096"},{"path":"https://mattheaphy.github.io/actxps/articles/actxps.html","id":"experience-study-summary-function","dir":"Articles","previous_headings":"","what":"Experience study summary function","title":"Getting started with actxps","text":"exp_stats() function creates summary observed experience data. output function exp_df object. See vignette(\"exp_summary\") details exposure calculations.","code":"exp_stats(exposed_data) #> Experience study results #>  #>  Groups:   #>  Target status: Surrender  #>  Study range: 1900-01-01 to 2019-12-31  #>  #> # A tibble: 1 × 4 #>   n_claims claims exposure  q_obs #> *    <int>  <int>    <dbl>  <dbl> #> 1     2869   2869  132634. 0.0216"},{"path":"https://mattheaphy.github.io/actxps/articles/actxps.html","id":"grouped-experience-data","dir":"Articles","previous_headings":"Experience study summary function","what":"Grouped experience data","title":"Getting started with actxps","text":"data frame passed exp_stats() grouped using dplyr::group_by(), resulting output contain one record unique group.","code":"library(dplyr)  exp_res <- exposed_data |>   group_by(pol_yr, inc_guar) |>   exp_stats()  exp_res #> Experience study results #>  #>  Groups: pol_yr, inc_guar  #>  Target status: Surrender  #>  Study range: 1900-01-01 to 2019-12-31  #>  #> # A tibble: 30 × 6 #>    pol_yr inc_guar n_claims claims exposure   q_obs #>  *  <int> <lgl>       <int>  <int>    <dbl>   <dbl> #>  1      1 FALSE          56     56    7720. 0.00725 #>  2      1 TRUE           46     46   11532. 0.00399 #>  3      2 FALSE          92     92    7103. 0.0130  #>  4      2 TRUE           68     68   10612. 0.00641 #>  5      3 FALSE          67     67    6447. 0.0104  #>  6      3 TRUE           57     57    9650. 0.00591 #>  7      4 FALSE         123    123    5799. 0.0212  #>  8      4 TRUE           45     45    8737. 0.00515 #>  9      5 FALSE          97     97    5106. 0.0190  #> 10      5 TRUE           67     67    7810. 0.00858 #> # … with 20 more rows"},{"path":"https://mattheaphy.github.io/actxps/articles/actxps.html","id":"actual-to-expected-rates","dir":"Articles","previous_headings":"Experience study summary function","what":"Actual-to-expected rates","title":"Getting started with actxps","text":"derive actual--expected rates, first attach one columns expected termination rates exposure data. , pass column names expected argument exp_stats().","code":"expected_table <- c(seq(0.005, 0.03, length.out = 10), 0.2, 0.15, rep(0.05, 3))  # using 2 different expected termination rates exposed_data <- exposed_data |>   mutate(expected_1 = expected_table[pol_yr],          expected_2 = ifelse(exposed_data$inc_guar, 0.015, 0.03))  exp_res <- exposed_data |>   group_by(pol_yr, inc_guar) |>   exp_stats(expected = c(\"expected_1\", \"expected_2\"))  exp_res #> Experience study results #>  #>  Groups: pol_yr, inc_guar  #>  Target status: Surrender  #>  Study range: 1900-01-01 to 2019-12-31  #>  Expected values: expected_1, expected_2  #>  #> # A tibble: 30 × 10 #>    pol_yr inc_g…¹ n_cla…² claims expos…³   q_obs expec…⁴ expec…⁵ ae_ex…⁶ ae_ex…⁷ #>  *  <int> <lgl>     <int>  <int>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> #>  1      1 FALSE        56     56   7720. 0.00725 0.005     0.03    1.45    0.242 #>  2      1 TRUE         46     46  11532. 0.00399 0.005     0.015   0.798   0.266 #>  3      2 FALSE        92     92   7103. 0.0130  0.00778   0.03    1.67    0.432 #>  4      2 TRUE         68     68  10612. 0.00641 0.00778   0.015   0.824   0.427 #>  5      3 FALSE        67     67   6447. 0.0104  0.0106    0.03    0.985   0.346 #>  6      3 TRUE         57     57   9650. 0.00591 0.0106    0.015   0.560   0.394 #>  7      4 FALSE       123    123   5799. 0.0212  0.0133    0.03    1.59    0.707 #>  8      4 TRUE         45     45   8737. 0.00515 0.0133    0.015   0.386   0.343 #>  9      5 FALSE        97     97   5106. 0.0190  0.0161    0.03    1.18    0.633 #> 10      5 TRUE         67     67   7810. 0.00858 0.0161    0.015   0.532   0.572 #> # … with 20 more rows, and abbreviated variable names ¹​inc_guar, ²​n_claims, #> #   ³​exposure, ⁴​expected_1, ⁵​expected_2, ⁶​ae_expected_1, ⁷​ae_expected_2"},{"path":"https://mattheaphy.github.io/actxps/articles/actxps.html","id":"autoplot-and-autotable","dir":"Articles","previous_headings":"Experience study summary function","what":"autoplot() and autotable()","title":"Getting started with actxps","text":"autoplot() autotable() functions can used create visualizations summary tables.","code":"library(ggplot2)  .colors <- c(\"#eb15e4\", \"#7515eb\") theme_set(theme_light())  exp_res |>   autoplot() +   scale_color_manual(values = .colors) +   labs(title = \"Observed Surrender Rates by Policy Year and Income Guarantee Presence\") autotable(exp_res)"},{"path":"https://mattheaphy.github.io/actxps/articles/actxps.html","id":"summary","dir":"Articles","previous_headings":"Experience study summary function","what":"summary()","title":"Getting started with actxps","text":"Calling summary() function exp_df object re-summarizes experience results. also produces exp_df object. additional variables passed ..., variables become groups re-summarized exp_df object.","code":"summary(exp_res) #> Experience study results #>  #>  Groups:   #>  Target status: Surrender  #>  Study range: 1900-01-01 to 2019-12-31  #>  Expected values: expected_1, expected_2  #>  #> # A tibble: 1 × 8 #>   n_claims claims exposure  q_obs expected_1 expected_2 ae_expected_1 ae_expec…¹ #> *    <int>  <int>    <dbl>  <dbl>      <dbl>      <dbl>         <dbl>      <dbl> #> 1     2869   2869  132634. 0.0216     0.0242     0.0209         0.892       1.04 #> # … with abbreviated variable name ¹​ae_expected_2 summary(exp_res, inc_guar) #> Experience study results #>  #>  Groups: inc_guar  #>  Target status: Surrender  #>  Study range: 1900-01-01 to 2019-12-31  #>  Expected values: expected_1, expected_2  #>  #> # A tibble: 2 × 9 #>   inc_guar n_claims claims exposure  q_obs expected_1 expected_2 ae_ex…¹ ae_ex…² #> * <lgl>       <int>  <int>    <dbl>  <dbl>      <dbl>      <dbl>   <dbl>   <dbl> #> 1 FALSE        1601   1601   52123. 0.0307     0.0235      0.03    1.31     1.02 #> 2 TRUE         1268   1268   80511. 0.0157     0.0247      0.015   0.637    1.05 #> # … with abbreviated variable names ¹​ae_expected_1, ²​ae_expected_2"},{"path":"https://mattheaphy.github.io/actxps/articles/actxps.html","id":"shiny-app","dir":"Articles","previous_headings":"","what":"Shiny App","title":"Getting started with actxps","text":"Passing exposed_df object exp_shiny() function launches shiny app enables interactive exploration experience data.","code":"exp_shiny(exposed_data)"},{"path":"https://mattheaphy.github.io/actxps/articles/exp_summary.html","id":"the-exp_stats-function","dir":"Articles","previous_headings":"","what":"The exp_stats() function","title":"Experience summaries","text":"use exp_stats(), pass data frame exposure-level records, ideally type exposed_df (object class returned expose() family functions). results show us specified groups, output data single row. addition, can see ’re looking surrender rates end 2019, exp_stats inferred exposed_data. number claims (n_claims) equal number “Surrender” statuses exposed_data. Since didn’t specify weighting variable, amount claims (claims) equals number claims. total exposure (exposure) equal sum exposures exposed_data. specified weighting variable, equal sum weighted exposures. Lastly, observed termination rate (q_obs) equals amount claims divided exposures.","code":"exp_stats(exposed_data) #> Experience study results #>  #>  Groups:   #>  Target status: Surrender  #>  Study range: 1900-01-01 to 2019-12-31  #>  #> # A tibble: 1 × 4 #>   n_claims claims exposure  q_obs #> *    <int>  <int>    <dbl>  <dbl> #> 1     2869   2869  132634. 0.0216 (amount <- sum(exposed_data$status == \"Surrender\")) #> [1] 2869 (sum_expo <- sum(exposed_data$exposure)) #> [1] 132634 amount / sum_expo #> [1] 0.02163096"},{"path":"https://mattheaphy.github.io/actxps/articles/exp_summary.html","id":"grouped-data","dir":"Articles","previous_headings":"The exp_stats() function","what":"Grouped data","title":"Experience summaries","text":"data frame passed exp_stats() grouped using dplyr::group_by(), resulting output contain one record unique group. following, exposed_data grouped policy year passed exp_stats(). results one row per policy year found data. Multiple grouping variables allowed. , presence income guarantee (inc_guar) added second grouping variable.","code":"exposed_data |>    group_by(pol_yr) |>    exp_stats() #> Experience study results #>  #>  Groups: pol_yr  #>  Target status: Surrender  #>  Study range: 1900-01-01 to 2019-12-31  #>  #> # A tibble: 15 × 5 #>    pol_yr n_claims claims exposure   q_obs #>  *  <int>    <int>  <int>    <dbl>   <dbl> #>  1      1      102    102   19252. 0.00530 #>  2      2      160    160   17715. 0.00903 #>  3      3      124    124   16097. 0.00770 #>  4      4      168    168   14536. 0.0116  #>  5      5      164    164   12916. 0.0127  #>  6      6      152    152   11376. 0.0134  #>  7      7      164    164    9917. 0.0165  #>  8      8      190    190    8448. 0.0225  #>  9      9      181    181    6960. 0.0260  #> 10     10      152    152    5604. 0.0271  #> 11     11      804    804    4390. 0.183   #> 12     12      330    330    2663. 0.124   #> 13     13       99     99    1620. 0.0611  #> 14     14       62     62     872. 0.0711  #> 15     15       17     17     268. 0.0634 exposed_data |>    group_by(inc_guar, pol_yr) |>    exp_stats() #> Experience study results #>  #>  Groups: inc_guar, pol_yr  #>  Target status: Surrender  #>  Study range: 1900-01-01 to 2019-12-31  #>  #> # A tibble: 30 × 6 #>    inc_guar pol_yr n_claims claims exposure   q_obs #>  * <lgl>     <int>    <int>  <int>    <dbl>   <dbl> #>  1 FALSE         1       56     56    7720. 0.00725 #>  2 FALSE         2       92     92    7103. 0.0130  #>  3 FALSE         3       67     67    6447. 0.0104  #>  4 FALSE         4      123    123    5799. 0.0212  #>  5 FALSE         5       97     97    5106. 0.0190  #>  6 FALSE         6       96     96    4494. 0.0214  #>  7 FALSE         7       92     92    3899. 0.0236  #>  8 FALSE         8      103    103    3287. 0.0313  #>  9 FALSE         9       87     87    2684. 0.0324  #> 10 FALSE        10       60     60    2156. 0.0278  #> # … with 20 more rows"},{"path":"https://mattheaphy.github.io/actxps/articles/exp_summary.html","id":"target-status","dir":"Articles","previous_headings":"The exp_stats() function","what":"Target status","title":"Experience summaries","text":"target_status argument exp_stats() specifies status levels count claims experience study summary. data passed exp_stats() exposed_df object already specified target status (via prior call expose()), argument necessary target status automatically inferred. Even target status exists input data, can overridden. However care taken ensure exposure values data appropriate new status. Using example data, total termination rate can estimated including death surrender statuses target_status. ensure exposures accurate, adjustment made fully expose deaths prior calling exp_stats()2.","code":"exposed_data |>    mutate(exposure = ifelse(status == \"Death\", 1, status)) |>    group_by(pol_yr) |>    exp_stats(target_status = c(\"Surrender\", \"Death\")) #> Experience study results #>  #>  Groups: pol_yr  #>  Target status: Surrender, Death  #>  Study range: 1900-01-01 to 2019-12-31  #>  #> # A tibble: 15 × 5 #>    pol_yr n_claims claims exposure  q_obs #>  *  <int>    <int>  <int>    <dbl>  <dbl> #>  1      1      290    290    20199 0.0144 #>  2      2      325    325    18754 0.0173 #>  3      3      292    292    17054 0.0171 #>  4      4      329    329    15602 0.0211 #>  5      5      329    329    13946 0.0236 #>  6      6      334    334    12371 0.0270 #>  7      7      297    297    10869 0.0273 #>  8      8      340    340     9510 0.0358 #>  9      9      308    308     7953 0.0387 #> 10     10      260    260     6489 0.0401 #> 11     11      894    894     6505 0.137  #> 12     12      398    398     3753 0.106  #> 13     13      131    131     2135 0.0614 #> 14     14       89     89     1306 0.0681 #> 15     15       23     23      544 0.0423"},{"path":"https://mattheaphy.github.io/actxps/articles/exp_summary.html","id":"weighted-results","dir":"Articles","previous_headings":"","what":"Weighted results","title":"Experience summaries","text":"Experience studies often weight output key policy values. Examples include account values, cash values, face amount, premiums, . Weighting can accomplished passing name weighting column wt argument exp_stats(). sample data contains column called pol_val can weight . weights supplied, claims, exposure, q_obs columns weighted. expected termination rates supplied (see ), rates /E values also weighted.3","code":"exposed_data |>    group_by(pol_yr) |>    exp_stats(wt = 'pol_val') #> Experience study results #>  #>  Groups: pol_yr  #>  Target status: Surrender  #>  Study range: 1900-01-01 to 2019-12-31  #>  Weighted by: pol_val  #>  #> # A tibble: 15 × 8 #>    pol_yr n_claims claims  exposure   q_obs  .weight  .weight_sq .weight_n #>  *  <int>    <int>  <dbl>     <dbl>   <dbl>    <dbl>       <dbl>     <dbl> #>  1      1      102  83223 25312813. 0.00329 26301746 60742993234     19995 #>  2      2      160 170058 23352482. 0.00728 24275265 56232848027     18434 #>  3      3      124 123554 21246774. 0.00582 22201817 51746834383     16806 #>  4      4      168 176751 19270854. 0.00917 20200019 47142441689     15266 #>  5      5      164 173273 17228981. 0.0101  18134795 42887920479     13618 #>  6      6      152 163034 15246521. 0.0107  16192950 38828949428     12067 #>  7      7      164 153238 13328780. 0.0115  14159437 34291451913     10541 #>  8      8      190 174200 11476432. 0.0152  12346124 30121310640      9130 #>  9      9      181 187337  9546258. 0.0196  10420172 25781142118      7591 #> 10     10      152 157603  7707064. 0.0204   8543150 20882643976      6185 #> 11     11      804 856379  6093183. 0.141    6783273 16219955859      4897 #> 12     12      330 383055  3883534. 0.0986   4525027 11191462577      3093 #> 13     13       99 123357  2450266. 0.0503   2891573  7075934189      1937 #> 14     14       62  75534  1339240. 0.0564   1821026  4655661820      1182 #> 15     15       17  19168   401173. 0.0478    783146  1944755748       510"},{"path":"https://mattheaphy.github.io/actxps/articles/exp_summary.html","id":"expected-values-and-ae-ratios","dir":"Articles","previous_headings":"","what":"Expected values and A/E ratios","title":"Experience summaries","text":"common metric experience studies actual--expected, /E ratio. \\[ /E\\ ratio = \\frac{observed\\ value}{expected\\ value} \\] data passed exp_stats() one columns containing expected termination rates, /E ratios can calculated passing names columns expected argument. Let’s assume two sets expected rates. first set vector varies policy year. second set either 1.5% 3.0% depending whether policy guaranteed income benefit. First, need attach assumptions exposure data. use names expected_1 expected_2. pass names expected argument call exp_stats(). output, 4 new columns created expected rates /E ratios. noted , weights passed exp_stats() /E ratios also weighted.","code":"expected_table <- c(seq(0.005, 0.03, length.out = 10), 0.2, 0.15, rep(0.05, 3))  # using 2 different expected termination assumption sets exposed_data2 <- exposed_data |>   mutate(expected_1 = expected_table[pol_yr],          expected_2 = ifelse(exposed_data$inc_guar, 0.015, 0.03))  exp_res <- exposed_data2 |>   group_by(pol_yr, inc_guar) |>   exp_stats(expected = c(\"expected_1\", \"expected_2\"))     exp_res |>    select(pol_yr, inc_guar, q_obs, expected_1, expected_2,           ae_expected_1, ae_expected_2) #> Experience study results #>  #>  Groups: pol_yr, inc_guar  #>  Target status: Surrender  #>  Study range: 1900-01-01 to 2019-12-31  #>  Expected values: expected_1, expected_2  #>  #> # A tibble: 30 × 7 #>    pol_yr inc_guar   q_obs expected_1 expected_2 ae_expected_1 ae_expected_2 #>     <int> <lgl>      <dbl>      <dbl>      <dbl>         <dbl>         <dbl> #>  1      1 FALSE    0.00725    0.005        0.03          1.45          0.242 #>  2      1 TRUE     0.00399    0.005        0.015         0.798         0.266 #>  3      2 FALSE    0.0130     0.00778      0.03          1.67          0.432 #>  4      2 TRUE     0.00641    0.00778      0.015         0.824         0.427 #>  5      3 FALSE    0.0104     0.0106       0.03          0.985         0.346 #>  6      3 TRUE     0.00591    0.0106       0.015         0.560         0.394 #>  7      4 FALSE    0.0212     0.0133       0.03          1.59          0.707 #>  8      4 TRUE     0.00515    0.0133       0.015         0.386         0.343 #>  9      5 FALSE    0.0190     0.0161       0.03          1.18          0.633 #> 10      5 TRUE     0.00858    0.0161       0.015         0.532         0.572 #> # … with 20 more rows exposed_data2 |>   group_by(pol_yr, inc_guar) |>   exp_stats(expected = c(\"expected_1\", \"expected_2\"),              wt = \"pol_val\") |>    select(pol_yr, inc_guar, q_obs, expected_1, expected_2,           ae_expected_1, ae_expected_2) #> Experience study results #>  #>  Groups: pol_yr, inc_guar  #>  Target status: Surrender  #>  Study range: 1900-01-01 to 2019-12-31  #>  Expected values: expected_1, expected_2  #>  Weighted by: pol_val  #>  #> # A tibble: 30 × 7 #>    pol_yr inc_guar   q_obs expected_1 expected_2 ae_expected_1 ae_expected_2 #>     <int> <lgl>      <dbl>      <dbl>      <dbl>         <dbl>         <dbl> #>  1      1 FALSE    0.00471    0.005        0.03          0.942         0.157 #>  2      1 TRUE     0.00235    0.005        0.015         0.470         0.157 #>  3      2 FALSE    0.0105     0.00778      0.03          1.36          0.351 #>  4      2 TRUE     0.00513    0.00778      0.015         0.660         0.342 #>  5      3 FALSE    0.00737    0.0106       0.03          0.698         0.246 #>  6      3 TRUE     0.00479    0.0106       0.015         0.453         0.319 #>  7      4 FALSE    0.0174     0.0133       0.03          1.30          0.579 #>  8      4 TRUE     0.00377    0.0133       0.015         0.283         0.252 #>  9      5 FALSE    0.0146     0.0161       0.03          0.907         0.487 #> 10      5 TRUE     0.00710    0.0161       0.015         0.441         0.473 #> # … with 20 more rows"},{"path":"https://mattheaphy.github.io/actxps/articles/exp_summary.html","id":"credibility","dir":"Articles","previous_headings":"","what":"Credibility","title":"Experience summaries","text":"credibility argument set TRUE, exp_stats() produce estimate partial credibility Limited Fluctuation credibility method (also known Classical Credibility) assuming binomial distribution claims.4 default arguments, credibility calculations assume 95% confidence within 5% true value. parameters can overridden using cred_p cred_r arguments, respectively. expected values passed exp_stats() credibility set TRUE, output also contain credibility-weighted expected values: \\[ q^{adj} = Z^{cred} \\times q^{obs} + (1-Z^{cred}) \\times q^{exp} \\] , \\(q^{adj}\\) = credibility-weighted estimate \\(Z^{cred}\\) = partial credibility factor \\(q^{obs}\\) = observed termination rate \\(q^{exp}\\) = expected termination rate","code":"exposed_data2 |>    group_by(pol_yr, inc_guar) |>   exp_stats(credibility = TRUE) |>    select(pol_yr, inc_guar, claims, q_obs, credibility) #> Experience study results #>  #>  Groups: pol_yr, inc_guar  #>  Target status: Surrender  #>  Study range: 1900-01-01 to 2019-12-31  #>  #> # A tibble: 30 × 5 #>    pol_yr inc_guar claims   q_obs credibility #>     <int> <lgl>     <int>   <dbl>       <dbl> #>  1      1 FALSE        56 0.00725       0.192 #>  2      1 TRUE         46 0.00399       0.173 #>  3      2 FALSE        92 0.0130        0.246 #>  4      2 TRUE         68 0.00641       0.211 #>  5      3 FALSE        67 0.0104        0.210 #>  6      3 TRUE         57 0.00591       0.193 #>  7      4 FALSE       123 0.0212        0.286 #>  8      4 TRUE         45 0.00515       0.172 #>  9      5 FALSE        97 0.0190        0.254 #> 10      5 TRUE         67 0.00858       0.210 #> # … with 20 more rows exposed_data2 |>    group_by(pol_yr, inc_guar) |>   exp_stats(credibility = TRUE, cred_p = 0.98, cred_r = 0.03) |>    select(pol_yr, inc_guar, claims, q_obs, credibility) #> Experience study results #>  #>  Groups: pol_yr, inc_guar  #>  Target status: Surrender  #>  Study range: 1900-01-01 to 2019-12-31  #>  #> # A tibble: 30 × 5 #>    pol_yr inc_guar claims   q_obs credibility #>     <int> <lgl>     <int>   <dbl>       <dbl> #>  1      1 FALSE        56 0.00725      0.0969 #>  2      1 TRUE         46 0.00399      0.0876 #>  3      2 FALSE        92 0.0130       0.125  #>  4      2 TRUE         68 0.00641      0.107  #>  5      3 FALSE        67 0.0104       0.106  #>  6      3 TRUE         57 0.00591      0.0976 #>  7      4 FALSE       123 0.0212       0.145  #>  8      4 TRUE         45 0.00515      0.0867 #>  9      5 FALSE        97 0.0190       0.128  #> 10      5 TRUE         67 0.00858      0.106  #> # … with 20 more rows exposed_data2 |>    group_by(pol_yr, inc_guar) |>   exp_stats(credibility = TRUE, expected = \"expected_1\") |>    select(pol_yr, inc_guar, claims, q_obs, credibility, adj_expected_1,           expected_1, ae_expected_1) #> Experience study results #>  #>  Groups: pol_yr, inc_guar  #>  Target status: Surrender  #>  Study range: 1900-01-01 to 2019-12-31  #>  Expected values: expected_1  #>  #> # A tibble: 30 × 8 #>    pol_yr inc_guar claims   q_obs credibility adj_expected_1 expected_1 ae_exp…¹ #>     <int> <lgl>     <int>   <dbl>       <dbl>          <dbl>      <dbl>    <dbl> #>  1      1 FALSE        56 0.00725       0.192        0.00543    0.005      1.45  #>  2      1 TRUE         46 0.00399       0.173        0.00482    0.005      0.798 #>  3      2 FALSE        92 0.0130        0.246        0.00905    0.00778    1.67  #>  4      2 TRUE         68 0.00641       0.211        0.00749    0.00778    0.824 #>  5      3 FALSE        67 0.0104        0.210        0.0105     0.0106     0.985 #>  6      3 TRUE         57 0.00591       0.193        0.00966    0.0106     0.560 #>  7      4 FALSE       123 0.0212        0.286        0.0156     0.0133     1.59  #>  8      4 TRUE         45 0.00515       0.172        0.0119     0.0133     0.386 #>  9      5 FALSE        97 0.0190        0.254        0.0168     0.0161     1.18  #> 10      5 TRUE         67 0.00858       0.210        0.0145     0.0161     0.532 #> # … with 20 more rows, and abbreviated variable name ¹​ae_expected_1"},{"path":[]},{"path":"https://mattheaphy.github.io/actxps/articles/exp_summary.html","id":"summary-method","dir":"Articles","previous_headings":"Miscellaneous","what":"Summary method","title":"Experience summaries","text":"noted , result exp_stats() exp_df object. summary() function applied exp_df object, data summarized return higher level exp_df object. additional arguments passed, summary() returns single row aggregate results. additional variable names passed summary() function, output group data variables. example, pol_yr passed summary(), output contain one row per policy year. Similarly, inc_guar passed summary(), output contain row unique value inc_guar.","code":"summary(exp_res) #> Experience study results #>  #>  Groups:   #>  Target status: Surrender  #>  Study range: 1900-01-01 to 2019-12-31  #>  Expected values: expected_1, expected_2  #>  #> # A tibble: 1 × 8 #>   n_claims claims exposure  q_obs expected_1 expected_2 ae_expected_1 ae_expec…¹ #> *    <int>  <int>    <dbl>  <dbl>      <dbl>      <dbl>         <dbl>      <dbl> #> 1     2869   2869  132634. 0.0216     0.0242     0.0209         0.892       1.04 #> # … with abbreviated variable name ¹​ae_expected_2 summary(exp_res, pol_yr) #> Experience study results #>  #>  Groups: pol_yr  #>  Target status: Surrender  #>  Study range: 1900-01-01 to 2019-12-31  #>  Expected values: expected_1, expected_2  #>  #> # A tibble: 15 × 9 #>    pol_yr n_claims claims exposure   q_obs expected_1 expected_2 ae_ex…¹ ae_ex…² #>  *  <int>    <int>  <int>    <dbl>   <dbl>      <dbl>      <dbl>   <dbl>   <dbl> #>  1      1      102    102   19252. 0.00530    0.005       0.0210   1.06    0.252 #>  2      2      160    160   17715. 0.00903    0.00778     0.0210   1.16    0.430 #>  3      3      124    124   16097. 0.00770    0.0106      0.0210   0.730   0.367 #>  4      4      168    168   14536. 0.0116     0.0133      0.0210   0.867   0.551 #>  5      5      164    164   12916. 0.0127     0.0161      0.0209   0.788   0.607 #>  6      6      152    152   11376. 0.0134     0.0189      0.0209   0.707   0.639 #>  7      7      164    164    9917. 0.0165     0.0217      0.0209   0.763   0.791 #>  8      8      190    190    8448. 0.0225     0.0244      0.0208   0.920   1.08  #>  9      9      181    181    6960. 0.0260     0.0272      0.0208   0.955   1.25  #> 10     10      152    152    5604. 0.0271     0.03        0.0208   0.904   1.31  #> 11     11      804    804    4390. 0.183      0.2         0.0208   0.916   8.81  #> 12     12      330    330    2663. 0.124      0.15        0.0200   0.826   6.18  #> 13     13       99     99    1620. 0.0611     0.05        0.0197   1.22    3.11  #> 14     14       62     62     872. 0.0711     0.05        0.0195   1.42    3.64  #> 15     15       17     17     268. 0.0634     0.05        0.0191   1.27    3.31  #> # … with abbreviated variable names ¹​ae_expected_1, ²​ae_expected_2 summary(exp_res, inc_guar) #> Experience study results #>  #>  Groups: inc_guar  #>  Target status: Surrender  #>  Study range: 1900-01-01 to 2019-12-31  #>  Expected values: expected_1, expected_2  #>  #> # A tibble: 2 × 9 #>   inc_guar n_claims claims exposure  q_obs expected_1 expected_2 ae_ex…¹ ae_ex…² #> * <lgl>       <int>  <int>    <dbl>  <dbl>      <dbl>      <dbl>   <dbl>   <dbl> #> 1 FALSE        1601   1601   52123. 0.0307     0.0235      0.03    1.31     1.02 #> 2 TRUE         1268   1268   80511. 0.0157     0.0247      0.015   0.637    1.05 #> # … with abbreviated variable names ¹​ae_expected_1, ²​ae_expected_2"},{"path":"https://mattheaphy.github.io/actxps/articles/exp_summary.html","id":"column-names","dir":"Articles","previous_headings":"Miscellaneous","what":"Column names","title":"Experience summaries","text":"default, exp_stats() assumes input data frame uses following naming conventions: exposure column called exposure status column called status default names can overridden using col_exposure col_status arguments. example, status column called curr_stat data, write:","code":"exposed_data |>    exp_stats(col_status = \"curr_stat\")"},{"path":"https://mattheaphy.github.io/actxps/articles/exp_summary.html","id":"applying-exp_stats-to-a-non-exposed_df-data-frame","dir":"Articles","previous_headings":"Miscellaneous","what":"Applying exp_stats to a non-exposed_df data frame","title":"Experience summaries","text":"exp_stats() can still work given non-exposed_df data frame. However, unable infer certain attributes like target status study dates. target status, statuses except first level assumed terminations. Since may desirable, warning message appear informing statuses assumed terminated. target_status provided, warning message appear.","code":"not_exposed_df <- data.frame(exposed_data)  exp_stats(not_exposed_df) #> Warning: ✖ No target status was provided. #> ℹ Death, Surrender was assumed. #> Experience study results #>  #>  Groups:   #>  Target status: Death, Surrender  #>  Study range:  to   #>  #>   n_claims claims exposure      q_obs #> 1     4639   4639   132634 0.03497596 exp_stats(not_exposed_df, target_status = \"Surrender\") #> Experience study results #>  #>  Groups:   #>  Target status: Surrender  #>  Study range:  to   #>  #>   n_claims claims exposure      q_obs #> 1     2869   2869   132634 0.02163096"},{"path":"https://mattheaphy.github.io/actxps/articles/exp_summary.html","id":"limitations","dir":"Articles","previous_headings":"Miscellaneous","what":"Limitations","title":"Experience summaries","text":"exp_stats() function supports termination studies. contain support transaction studies studies multiple changes active inactive status.","code":""},{"path":"https://mattheaphy.github.io/actxps/articles/exposures.html","id":"toy-census-data","dir":"Articles","previous_headings":"","what":"Toy census data","title":"Exposure calculations","text":"get started, ’re going use toy census data frame actxps package contains 3 policies: one active, one terminated due death, one terminated due surrender. toy_census contains 4 columns necessary compute exposures: pol_num: unique identifier individual policies status: policy status issue_date: issue date term_date: termination date, . Otherwise NA","code":"library(actxps) library(dplyr)  toy_census #>   pol_num    status issue_date  term_date #> 1       1    Active 2010-01-01       <NA> #> 2       2     Death 2011-05-27 2020-09-14 #> 3       3 Surrender 2009-11-10 2022-02-25"},{"path":"https://mattheaphy.github.io/actxps/articles/exposures.html","id":"policy-year-exposures","dir":"Articles","previous_headings":"","what":"Policy year exposures","title":"Exposure calculations","text":"Let’s assume ’re performing experience study 2022-12-31 ’re interested policy year exposures. ’s expect 3 policies. Policy 1 issued January 1, 2010 terminated. Therefore expect 13 exposure years. Policy 2 issued May 27, 2011 terminated 2020 due death. death occurred 9th policy anniversary, therefore expect 9 fully exposed years partial exposure 10th year. Policy 3 issued November 10, 2009 terminated 2022 due surrender. surrender occurred 12th policy anniversary, therefore expect 12 fully exposed years partial exposure 13th year. calculate exposures, pass data expose() function specify study end_date. creates exposed_df object, type data frame additional attributes related experience study. Let’s examine happened policy. Policy 1: expected, 13 rows policy. New columns added policy year (pol_yr), anniversary (pol_date_yr), exposure. exposures 100% since policy active 13 years. data printed, additional attributes exposed_df class displayed. Policy 2: 10 rows policy. first 9 periods show policy active status termination date (term_date) set NA. last period includes final status “Death” actual termination date. last exposure less one roughly third year elapsed last anniversary date 2020-05-27 termination date 2020-09-14. Policy 3: 13 rows policy. first 12 periods show policy active status termination date (term_date) set NA. last period includes final status “Surrender” actual termination date. last exposure less one roughly third year elapsed last anniversary date 2021-11-10 termination date 2022-02-25.","code":"exposed_data <- expose(toy_census, end_date = \"2022-12-31\") is_exposed_df(exposed_data) #> [1] TRUE exposed_data |> filter(pol_num == 1) #> Exposure data #>  #>  Exposure type: policy_year  #>  Target status:   #>  Study range: 1900-01-01 to 2022-12-31  #>  #> # A tibble: 13 × 8 #>    pol_num status issue_date term_date pol_yr pol_date_yr pol_date_yr_…¹ expos…² #>      <int> <fct>  <date>     <date>     <int> <date>      <date>           <dbl> #>  1       1 Active 2010-01-01 NA             1 2010-01-01  2010-12-31           1 #>  2       1 Active 2010-01-01 NA             2 2011-01-01  2011-12-31           1 #>  3       1 Active 2010-01-01 NA             3 2012-01-01  2012-12-31           1 #>  4       1 Active 2010-01-01 NA             4 2013-01-01  2013-12-31           1 #>  5       1 Active 2010-01-01 NA             5 2014-01-01  2014-12-31           1 #>  6       1 Active 2010-01-01 NA             6 2015-01-01  2015-12-31           1 #>  7       1 Active 2010-01-01 NA             7 2016-01-01  2016-12-31           1 #>  8       1 Active 2010-01-01 NA             8 2017-01-01  2017-12-31           1 #>  9       1 Active 2010-01-01 NA             9 2018-01-01  2018-12-31           1 #> 10       1 Active 2010-01-01 NA            10 2019-01-01  2019-12-31           1 #> 11       1 Active 2010-01-01 NA            11 2020-01-01  2020-12-31           1 #> 12       1 Active 2010-01-01 NA            12 2021-01-01  2021-12-31           1 #> 13       1 Active 2010-01-01 NA            13 2022-01-01  2022-12-31           1 #> # … with abbreviated variable names ¹​pol_date_yr_end, ²​exposure exposed_data |> filter(pol_num == 2) #> Exposure data #>  #>  Exposure type: policy_year  #>  Target status:   #>  Study range: 1900-01-01 to 2022-12-31  #>  #> # A tibble: 10 × 8 #>    pol_num status issue_date term_date  pol_yr pol_date_yr pol_date_yr…¹ expos…² #>      <int> <fct>  <date>     <date>      <int> <date>      <date>          <dbl> #>  1       2 Active 2011-05-27 NA              1 2011-05-27  2012-05-26      1     #>  2       2 Active 2011-05-27 NA              2 2012-05-27  2013-05-26      1     #>  3       2 Active 2011-05-27 NA              3 2013-05-27  2014-05-26      1     #>  4       2 Active 2011-05-27 NA              4 2014-05-27  2015-05-26      1     #>  5       2 Active 2011-05-27 NA              5 2015-05-27  2016-05-26      1     #>  6       2 Active 2011-05-27 NA              6 2016-05-27  2017-05-26      1     #>  7       2 Active 2011-05-27 NA              7 2017-05-27  2018-05-26      1     #>  8       2 Active 2011-05-27 NA              8 2018-05-27  2019-05-26      1     #>  9       2 Active 2011-05-27 NA              9 2019-05-27  2020-05-26      1     #> 10       2 Death  2011-05-27 2020-09-14     10 2020-05-27  2021-05-26      0.304 #> # … with abbreviated variable names ¹​pol_date_yr_end, ²​exposure exposed_data |> filter(pol_num == 3) #> Exposure data #>  #>  Exposure type: policy_year  #>  Target status:   #>  Study range: 1900-01-01 to 2022-12-31  #>  #> # A tibble: 13 × 8 #>    pol_num status    issue_date term_date  pol_yr pol_date_yr pol_date…¹ expos…² #>      <int> <fct>     <date>     <date>      <int> <date>      <date>       <dbl> #>  1       3 Active    2009-11-10 NA              1 2009-11-10  2010-11-09   1     #>  2       3 Active    2009-11-10 NA              2 2010-11-10  2011-11-09   1     #>  3       3 Active    2009-11-10 NA              3 2011-11-10  2012-11-09   1     #>  4       3 Active    2009-11-10 NA              4 2012-11-10  2013-11-09   1     #>  5       3 Active    2009-11-10 NA              5 2013-11-10  2014-11-09   1     #>  6       3 Active    2009-11-10 NA              6 2014-11-10  2015-11-09   1     #>  7       3 Active    2009-11-10 NA              7 2015-11-10  2016-11-09   1     #>  8       3 Active    2009-11-10 NA              8 2016-11-10  2017-11-09   1     #>  9       3 Active    2009-11-10 NA              9 2017-11-10  2018-11-09   1     #> 10       3 Active    2009-11-10 NA             10 2018-11-10  2019-11-09   1     #> 11       3 Active    2009-11-10 NA             11 2019-11-10  2020-11-09   1     #> 12       3 Active    2009-11-10 NA             12 2020-11-10  2021-11-09   1     #> 13       3 Surrender 2009-11-10 2022-02-25     13 2021-11-10  2022-11-09   0.296 #> # … with abbreviated variable names ¹​pol_date_yr_end, ²​exposure"},{"path":"https://mattheaphy.github.io/actxps/articles/exposures.html","id":"study-start-date","dir":"Articles","previous_headings":"Policy year exposures","what":"Study start date","title":"Exposure calculations","text":"previous section supplied data study end_date expose(). minimum required arguments function. Optionally, start_date can supplied drop exposure periods begin specified date.","code":"expose(toy_census, end_date = \"2022-12-31\", start_date = \"2019-12-31\") #> Exposure data #>  #>  Exposure type: policy_year  #>  Target status:   #>  Study range: 2019-12-31 to 2022-12-31  #>  #> # A tibble: 6 × 8 #>   pol_num status    issue_date term_date  pol_yr pol_date_yr pol_date_…¹ expos…² #> *   <int> <fct>     <date>     <date>      <int> <date>      <date>        <dbl> #> 1       1 Active    2010-01-01 NA             11 2020-01-01  2020-12-31    1     #> 2       1 Active    2010-01-01 NA             12 2021-01-01  2021-12-31    1     #> 3       1 Active    2010-01-01 NA             13 2022-01-01  2022-12-31    1     #> 4       2 Death     2011-05-27 2020-09-14     10 2020-05-27  2021-05-26    0.304 #> 5       3 Active    2009-11-10 NA             12 2020-11-10  2021-11-09    1     #> 6       3 Surrender 2009-11-10 2022-02-25     13 2021-11-10  2022-11-09    0.296 #> # … with abbreviated variable names ¹​pol_date_yr_end, ²​exposure"},{"path":"https://mattheaphy.github.io/actxps/articles/exposures.html","id":"target-status","dir":"Articles","previous_headings":"Policy year exposures","what":"Target status","title":"Exposure calculations","text":"experience studies use annual exposure method allocates full period exposure particular termination event interest scope study. intuition approach simple: let’s assume unrealistically small study single data point one policy course one year. Let’s assume policy terminated due surrender half way year. don’t apply annual exposure method, calculate termination rate : \\[ q^{surr} = \\frac{claims}{exposures} = \\frac{1}{0.5} = 200\\% \\] termination rate 200% doesn’t make sense. annual exposure method see rate 100%, intuitive. \\[ q^{surr} = \\frac{claims}{exposures} = \\frac{1}{1} = 100\\% \\] annual exposure method can applied passing character vector target statuses expose() function. Let’s assume performing surrender study. Now let’s verify exposure surrendered policy increased 100% last exposure period.","code":"exposed_data2 <- expose(toy_census, end_date = \"2022-12-31\",                          target = \"Surrender\") exposed_data2 |>    group_by(pol_num) |>    slice_max(pol_yr) #> # A tibble: 3 × 8 #> # Groups:   pol_num [3] #>   pol_num status    issue_date term_date  pol_yr pol_date_yr pol_date_…¹ expos…² #>     <int> <fct>     <date>     <date>      <int> <date>      <date>        <dbl> #> 1       1 Active    2010-01-01 NA             13 2022-01-01  2022-12-31    1     #> 2       2 Death     2011-05-27 2020-09-14     10 2020-05-27  2021-05-26    0.304 #> 3       3 Surrender 2009-11-10 2022-02-25     13 2021-11-10  2022-11-09    1     #> # … with abbreviated variable names ¹​pol_date_yr_end, ²​exposure"},{"path":"https://mattheaphy.github.io/actxps/articles/exposures.html","id":"other-exposures-periods","dir":"Articles","previous_headings":"","what":"Other exposures periods","title":"Exposure calculations","text":"default exposure basis used expose() policy years. Using arguments cal_expo expo_length exposure periods can used.","code":""},{"path":"https://mattheaphy.github.io/actxps/articles/exposures.html","id":"calendar-years","dir":"Articles","previous_headings":"Other exposures periods","what":"Calendar years","title":"Exposure calculations","text":"cal_expo set TRUE, calendar year exposures calculated. Looking second policy, can see first year left-censored policy issued two-fifths way year, last period right-censored policy terminated roughly seven-tenths way year.","code":"toy_census[2, ] |>    expose(end_date = \"2022-12-31\", cal_expo = TRUE, target_status = \"Surrender\") #> Exposure data #>  #>  Exposure type: calendar_year  #>  Target status: Surrender  #>  Study range: 1900-01-01 to 2022-12-31  #>  #> # A tibble: 10 × 7 #>    pol_num status issue_date term_date  cal_yr     cal_yr_end exposure #>  *   <int> <fct>  <date>     <date>     <date>     <date>        <dbl> #>  1       2 Active 2011-05-27 NA         2011-01-01 2011-12-31    0.6   #>  2       2 Active 2011-05-27 NA         2012-01-01 2012-12-31    1     #>  3       2 Active 2011-05-27 NA         2013-01-01 2013-12-31    1     #>  4       2 Active 2011-05-27 NA         2014-01-01 2014-12-31    1     #>  5       2 Active 2011-05-27 NA         2015-01-01 2015-12-31    1     #>  6       2 Active 2011-05-27 NA         2016-01-01 2016-12-31    1     #>  7       2 Active 2011-05-27 NA         2017-01-01 2017-12-31    1     #>  8       2 Active 2011-05-27 NA         2018-01-01 2018-12-31    1     #>  9       2 Active 2011-05-27 NA         2019-01-01 2019-12-31    1     #> 10       2 Death  2011-05-27 2020-09-14 2020-01-01 2020-12-31    0.705"},{"path":"https://mattheaphy.github.io/actxps/articles/exposures.html","id":"quarters-months-and-weeks","dir":"Articles","previous_headings":"Other exposures periods","what":"Quarters, months, and weeks","title":"Exposure calculations","text":"length exposure period can decreased passing \"quarter\", \"month\", \"week\" expo_length argument. can used policy calendar-based exposures.","code":"toy_census[2, ] |>    expose(end_date = \"2022-12-31\",           cal_expo = TRUE,          expo_length = \"quarter\",           target_status = \"Surrender\") #> Exposure data #>  #>  Exposure type: calendar_quarter  #>  Target status: Surrender  #>  Study range: 1900-01-01 to 2022-12-31  #>  #> # A tibble: 38 × 7 #>    pol_num status issue_date term_date cal_qtr    cal_qtr_end exposure #>  *   <int> <fct>  <date>     <date>    <date>     <date>         <dbl> #>  1       2 Active 2011-05-27 NA        2011-04-01 2011-06-30     0.385 #>  2       2 Active 2011-05-27 NA        2011-07-01 2011-09-30     1     #>  3       2 Active 2011-05-27 NA        2011-10-01 2011-12-31     1     #>  4       2 Active 2011-05-27 NA        2012-01-01 2012-03-31     1     #>  5       2 Active 2011-05-27 NA        2012-04-01 2012-06-30     1     #>  6       2 Active 2011-05-27 NA        2012-07-01 2012-09-30     1     #>  7       2 Active 2011-05-27 NA        2012-10-01 2012-12-31     1     #>  8       2 Active 2011-05-27 NA        2013-01-01 2013-03-31     1     #>  9       2 Active 2011-05-27 NA        2013-04-01 2013-06-30     1     #> 10       2 Active 2011-05-27 NA        2013-07-01 2013-09-30     1     #> # … with 28 more rows"},{"path":"https://mattheaphy.github.io/actxps/articles/exposures.html","id":"convenience-functions","dir":"Articles","previous_headings":"Other exposures periods","what":"Convenience functions","title":"Exposure calculations","text":"following functions convenience wrappers around expose() can used target specific exposure type without specifying cal_expo expo_length. expose_py = exposures policy year expose_pq = exposures policy quarter expose_pm = exposures policy month expose_pw = exposures policy week expose_cy = exposures calendar year expose_cq = exposures calendar quarter expose_cm = exposures calendar month expose_cw = exposures calendar week","code":""},{"path":"https://mattheaphy.github.io/actxps/articles/exposures.html","id":"tidymodels-recipe-step","dir":"Articles","previous_headings":"","what":"Tidymodels recipe step","title":"Exposure calculations","text":"machine learning feature engineering, actxps package contains function called step_expose() compatible recipes package tidymodels. function can used apply expose() function within recipe.","code":"library(recipes) #>  #> Attaching package: 'recipes' #> The following object is masked from 'package:stats': #>  #>     step  expo_rec <- recipe(status ~ ., toy_census) |>   step_expose(end_date = \"2022-12-31\", target_status = \"Surrender\",               options = list(expo_length = \"month\")) |>   prep()  expo_rec #> Recipe #>  #> Inputs: #>  #>       role #variables #>    outcome          1 #>  predictor          3 #>  #> Training data contained 3 data points and 1 incomplete row.  #>  #> Operations: #>  #> Exposed data based on policy months for target status Surrender <none> [trained]  tidy(expo_rec, number = 1) #> # A tibble: 1 × 4 #>   exposure_type target_status start_date end_date   #>   <chr>         <chr>         <date>     <chr>      #> 1 policy_month  Surrender     1900-01-01 2022-12-31  bake(expo_rec, new_data = NULL) #> # A tibble: 416 × 7 #>    issue_date term_date status pol_mth pol_date_mth pol_date_mth_end exposure #>    <date>     <date>    <fct>    <int> <date>       <date>              <dbl> #>  1 2010-01-01 NA        Active       1 2010-01-01   2010-01-31              1 #>  2 2010-01-01 NA        Active       2 2010-02-01   2010-02-28              1 #>  3 2010-01-01 NA        Active       3 2010-03-01   2010-03-31              1 #>  4 2010-01-01 NA        Active       4 2010-04-01   2010-04-30              1 #>  5 2010-01-01 NA        Active       5 2010-05-01   2010-05-31              1 #>  6 2010-01-01 NA        Active       6 2010-06-01   2010-06-30              1 #>  7 2010-01-01 NA        Active       7 2010-07-01   2010-07-31              1 #>  8 2010-01-01 NA        Active       8 2010-08-01   2010-08-31              1 #>  9 2010-01-01 NA        Active       9 2010-09-01   2010-09-30              1 #> 10 2010-01-01 NA        Active      10 2010-10-01   2010-10-31              1 #> # … with 406 more rows"},{"path":[]},{"path":"https://mattheaphy.github.io/actxps/articles/exposures.html","id":"column-names","dir":"Articles","previous_headings":"Miscellaneous","what":"Column names","title":"Exposure calculations","text":"default, expose() functions assume census data frame uses following naming conventions: policy number column called pol_num status column called status issue date column called issue_date termination date column called term_date default names can overridden using col_pol_num, col_status, col_issue_date, col_term_date arguments. example, policy number column called id census-level data, write:","code":"expose(toy_census, end_date = \"2022-12-31\",         target = \"Surrender\",        col_pol_num = \"id\")"},{"path":"https://mattheaphy.github.io/actxps/articles/exposures.html","id":"treatment-of-additional-columns-in-the-census-data","dir":"Articles","previous_headings":"Miscellaneous","what":"Treatment of additional columns in the census data","title":"Exposure calculations","text":"census-level data contains policy attributes like plan type policy values, broadcast across exposure periods. Depending nature data, may may desirable. Constant policy attributes like plan type make sense broadcast, numeric values may may depending circumstances. experience study requires numeric feature varies time (ex: policy values, crediting rates, etc.), can always attach exposed_df object using join function.","code":"toy_census2 <- toy_census |>    mutate(plan_type = c(\"X\", \"Y\", \"Z\"),           policy_value = c(100, 125, 90))  expose(toy_census2, end_date = \"2022-12-31\",         target = \"Surrender\") #> Exposure data #>  #>  Exposure type: policy_year  #>  Target status: Surrender  #>  Study range: 1900-01-01 to 2022-12-31  #>  #> # A tibble: 36 × 10 #>    pol_num status issue_date term_date plan_type policy_value pol_yr pol_date_yr #>  *   <int> <fct>  <date>     <date>    <chr>            <dbl>  <int> <date>      #>  1       1 Active 2010-01-01 NA        X                  100      1 2010-01-01  #>  2       1 Active 2010-01-01 NA        X                  100      2 2011-01-01  #>  3       1 Active 2010-01-01 NA        X                  100      3 2012-01-01  #>  4       1 Active 2010-01-01 NA        X                  100      4 2013-01-01  #>  5       1 Active 2010-01-01 NA        X                  100      5 2014-01-01  #>  6       1 Active 2010-01-01 NA        X                  100      6 2015-01-01  #>  7       1 Active 2010-01-01 NA        X                  100      7 2016-01-01  #>  8       1 Active 2010-01-01 NA        X                  100      8 2017-01-01  #>  9       1 Active 2010-01-01 NA        X                  100      9 2018-01-01  #> 10       1 Active 2010-01-01 NA        X                  100     10 2019-01-01  #> # … with 26 more rows, and 2 more variables: pol_date_yr_end <date>, #> #   exposure <dbl> # Illustrative example - assume `values` is a data frame containing the columns pol_num and pol_yr.  exposed_data |>    left_join(values, by = c(\"pol_num\", \"pol_yr\"))"},{"path":"https://mattheaphy.github.io/actxps/articles/exposures.html","id":"limitations","dir":"Articles","previous_headings":"Miscellaneous","what":"Limitations","title":"Exposure calculations","text":"expose() family support: Studies multiple changes active inactive status. example, functions support changes active status impaired status, back active status.","code":""},{"path":"https://mattheaphy.github.io/actxps/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matt Heaphy. Author, maintainer.","code":""},{"path":"https://mattheaphy.github.io/actxps/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Heaphy M (2023). actxps: Create Actuarial Experience Studies: Prepare Data, Summarize Results, Create Reports. https://github.com/mattheaphy/actxps/, https://mattheaphy.github.io/actxps/.","code":"@Manual{,   title = {actxps: Create Actuarial Experience Studies: Prepare Data, Summarize Results, and Create Reports},   author = {Matt Heaphy},   year = {2023},   note = {https://github.com/mattheaphy/actxps/, https://mattheaphy.github.io/actxps/}, }"},{"path":"https://mattheaphy.github.io/actxps/index.html","id":"actxps-","dir":"","previous_headings":"","what":"Create Actuarial Experience Studies: Prepare Data, Summarize Results, and Create Reports","title":"Create Actuarial Experience Studies: Prepare Data, Summarize Results, and Create Reports","text":"actxps package provides set tools assist creation actuarial experience studies. Experience studies used actuaries explore historical experience across blocks business inform assumption setting projection models. expose() family functions convert census-level records policy calendar year exposure records. exp_stats() function creates experience summary data frames containing observed termination rates claims. Optionally, expected termination rates, actual--expected ratios, limited fluctuation credibility estimates can also returned. autoplot() autotable() functions creates plots tables reporting. exp_shiny() function launches Shiny app allows interactive exploration experience drivers.","code":""},{"path":"https://mattheaphy.github.io/actxps/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Create Actuarial Experience Studies: Prepare Data, Summarize Results, and Create Reports","text":"actxps package can installed CRAN : install development version GitHub use:","code":"install.packages(\"actxps\") devtools::install_github(\"mattheaphy/actxps\")"},{"path":"https://mattheaphy.github.io/actxps/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic usage","title":"Create Actuarial Experience Studies: Prepare Data, Summarize Results, and Create Reports","text":"expanded version demo available vignette(\"actxps\"). actxps package includes simulated census data theoretical deferred annuity product optional guaranteed income rider. grain data one row per policy. Convert census records exposure records one row per policy per year. Create summary grouped policy year presence guaranteed income rider. Calculate actual--expected ratios. First, attach one columns expected termination rates exposure data. , pass column names expected argument exp_stats(). Create visualizations using autoplot() autotable() functions.  Launch shiny app interactively explore experience data.  Logo Image macrovector Freepik","code":"library(actxps) library(dplyr)  census_dat #> # A tibble: 20,000 × 11 #>    pol_num status   issue_date inc_g…¹ qual    age product gender wd_age premium #>      <int> <fct>    <date>     <lgl>   <lgl> <int> <fct>   <fct>   <int>   <dbl> #>  1       1 Active   2014-12-17 TRUE    FALSE    56 b       F          77     370 #>  2       2 Surrend… 2007-09-24 FALSE   FALSE    71 a       F          71     708 #>  3       3 Active   2012-10-06 FALSE   TRUE     62 b       F          63     466 #>  4       4 Surrend… 2005-06-27 TRUE    TRUE     62 c       M          62     485 #>  5       5 Active   2019-11-22 FALSE   FALSE    62 c       F          67     978 #>  6       6 Active   2018-09-01 FALSE   TRUE     77 a       F          77    1288 #>  7       7 Active   2011-07-23 TRUE    TRUE     63 a       M          65    1046 #>  8       8 Active   2005-11-08 TRUE    TRUE     58 a       M          58    1956 #>  9       9 Active   2010-09-19 FALSE   FALSE    53 c       M          64    2165 #> 10      10 Active   2012-05-25 TRUE    FALSE    61 b       M          73     609 #> # … with 19,990 more rows, 1 more variable: term_date <date>, and abbreviated #> #   variable name ¹​inc_guar exposed_data <- expose(census_dat, end_date = \"2019-12-31\",                          target_status = \"Surrender\")  exposed_data #> Exposure data #>  #>  Exposure type: policy_year  #>  Target status: Surrender  #>  Study range: 1900-01-01 to 2019-12-31  #>  #> # A tibble: 141,252 × 15 #>    pol_num status issue_date inc_guar qual    age product gender wd_age premium #>  *   <int> <fct>  <date>     <lgl>    <lgl> <int> <fct>   <fct>   <int>   <dbl> #>  1       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  2       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  3       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  4       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  5       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  6       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  7       2 Active 2007-09-24 FALSE    FALSE    71 a       F          71     708 #>  8       2 Active 2007-09-24 FALSE    FALSE    71 a       F          71     708 #>  9       2 Active 2007-09-24 FALSE    FALSE    71 a       F          71     708 #> 10       2 Active 2007-09-24 FALSE    FALSE    71 a       F          71     708 #> # … with 141,242 more rows, and 5 more variables: term_date <date>, #> #   pol_yr <int>, pol_date_yr <date>, pol_date_yr_end <date>, exposure <dbl> exp_res <- exposed_data |>    group_by(pol_yr, inc_guar) |>    exp_stats()  exp_res #> Experience study results #>  #>  Groups: pol_yr, inc_guar  #>  Target status: Surrender  #>  Study range: 1900-01-01 to 2019-12-31  #>  #> # A tibble: 30 × 6 #>    pol_yr inc_guar n_claims claims exposure   q_obs #>  *  <int> <lgl>       <int>  <int>    <dbl>   <dbl> #>  1      1 FALSE          56     56    7720. 0.00725 #>  2      1 TRUE           46     46   11532. 0.00399 #>  3      2 FALSE          92     92    7103. 0.0130  #>  4      2 TRUE           68     68   10612. 0.00641 #>  5      3 FALSE          67     67    6447. 0.0104  #>  6      3 TRUE           57     57    9650. 0.00591 #>  7      4 FALSE         123    123    5799. 0.0212  #>  8      4 TRUE           45     45    8737. 0.00515 #>  9      5 FALSE          97     97    5106. 0.0190  #> 10      5 TRUE           67     67    7810. 0.00858 #> # … with 20 more rows expected_table <- c(seq(0.005, 0.03, length.out = 10), 0.2, 0.15, rep(0.05, 3))  # using 2 different expected termination rates exposed_data <- exposed_data |>    mutate(expected_1 = expected_table[pol_yr],          expected_2 = ifelse(exposed_data$inc_guar, 0.015, 0.03))  exp_res <- exposed_data |>    group_by(pol_yr, inc_guar) |>    exp_stats(expected = c(\"expected_1\", \"expected_2\"))  exp_res #> Experience study results #>  #>  Groups: pol_yr, inc_guar  #>  Target status: Surrender  #>  Study range: 1900-01-01 to 2019-12-31  #>  Expected values: expected_1, expected_2  #>  #> # A tibble: 30 × 10 #>    pol_yr inc_g…¹ n_cla…² claims expos…³   q_obs expec…⁴ expec…⁵ ae_ex…⁶ ae_ex…⁷ #>  *  <int> <lgl>     <int>  <int>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> #>  1      1 FALSE        56     56   7720. 0.00725 0.005     0.03    1.45    0.242 #>  2      1 TRUE         46     46  11532. 0.00399 0.005     0.015   0.798   0.266 #>  3      2 FALSE        92     92   7103. 0.0130  0.00778   0.03    1.67    0.432 #>  4      2 TRUE         68     68  10612. 0.00641 0.00778   0.015   0.824   0.427 #>  5      3 FALSE        67     67   6447. 0.0104  0.0106    0.03    0.985   0.346 #>  6      3 TRUE         57     57   9650. 0.00591 0.0106    0.015   0.560   0.394 #>  7      4 FALSE       123    123   5799. 0.0212  0.0133    0.03    1.59    0.707 #>  8      4 TRUE         45     45   8737. 0.00515 0.0133    0.015   0.386   0.343 #>  9      5 FALSE        97     97   5106. 0.0190  0.0161    0.03    1.18    0.633 #> 10      5 TRUE         67     67   7810. 0.00858 0.0161    0.015   0.532   0.572 #> # … with 20 more rows, and abbreviated variable names ¹​inc_guar, ²​n_claims, #> #   ³​exposure, ⁴​expected_1, ⁵​expected_2, ⁶​ae_expected_1, ⁷​ae_expected_2 library(ggplot2)  .colors <- c(\"#eb15e4\", \"#7515eb\") theme_set(theme_light())  exp_res |>    autoplot() +    scale_color_manual(values = .colors) +    labs(title = \"Observed Surrender Rates by Policy Year and Income Guarantee Presence\") autotable(exp_res) exp_shiny(exposed_data)"},{"path":"https://mattheaphy.github.io/actxps/reference/autoplot.exp_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot experience study results — autoplot.exp_df","title":"Plot experience study results — autoplot.exp_df","text":"Plot experience study results","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/autoplot.exp_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot experience study results — autoplot.exp_df","text":"","code":"# S3 method for exp_df autoplot(   object,   ...,   mapping,   scales = \"fixed\",   geoms = c(\"lines\", \"bars\"),   y_labels = scales::label_percent(accuracy = 0.1) )"},{"path":"https://mattheaphy.github.io/actxps/reference/autoplot.exp_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot experience study results — autoplot.exp_df","text":"object object class exp_df usually created function exp_stats(). ... Faceting variables passed ggplot2::facet_wrap(). mapping Aesthetic mapping passed ggplot2::ggplot(). scales scales argument passed ggplot2::facet_wrap(). geoms Type geometry. \"points\" passed, plot display lines points. \"bars\", plot display bars. y_labels Label function passed ggplot2::scale_y_continuous().","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/autoplot.exp_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot experience study results — autoplot.exp_df","text":"ggplot object","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/autoplot.exp_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot experience study results — autoplot.exp_df","text":"aesthetic map supplied, plot use first grouping variable object x axis q_obs y axis. addition, second grouping variable object used color fill. faceting variables supplied, plot use grouping variables 3 facets. variables passed ggplot2::facet_wrap().","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/autotable.html","id":null,"dir":"Reference","previous_headings":"","what":"Tabular experience study summary — autotable","title":"Tabular experience study summary — autotable","text":"autotable() generic function used create table object particular class. Tables constructed using gt package. autotable.exp_df() used convert experience study results presentation-friendly format.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/autotable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tabular experience study summary — autotable","text":"","code":"autotable(object, ...)  # S3 method for exp_df autotable(   object,   fontsize = 100,   decimals = 1,   colorful = TRUE,   color_q_obs = \"RColorBrewer::GnBu\",   color_ae_ = \"RColorBrewer::RdBu\",   rename_cols = rlang::list2(...),   ... )"},{"path":"https://mattheaphy.github.io/actxps/reference/autotable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tabular experience study summary — autotable","text":"object object class exp_df usually created function exp_stats(). ... Additional arguments passed gt::gt(). fontsize Font size percentage multiplier. decimals Number decimals display percentages colorful TRUE, color added observed decrement rate actual--expected columns. color_q_obs Color palette used observed decrement rate. color_ae_ Color palette used actual--expected rates. rename_cols optional list consisting key-value pairs. can used relabel columns output table. Names column names object values new labels. See gt::cols_label() information.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/autotable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tabular experience study summary — autotable","text":"gt object","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/autotable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tabular experience study summary — autotable","text":"See paletteer::paletteer_d()'s palette argument usage color_q_obs color_ae_ arguments.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/census_dat.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated census data — census_dat","title":"Simulated census data — census_dat","text":"Simulated census data theoretical deferred annuity product optional guaranteed income rider. data theoretical represent experience specific product.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/census_dat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated census data — census_dat","text":"","code":"census_dat"},{"path":"https://mattheaphy.github.io/actxps/reference/census_dat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated census data — census_dat","text":"data frame 20,000 rows 11 columns: pol_num policy number status policy status: Active, Surrender, Death issue_date issue date inc_guar indicates whether policy issued income guarantee qual indicates whether policy purchased tax-qualified funds age issue age product product: , b, c gender M (Male) F (Female) wd_age Age withdrawals commence pol_val Policy value term_date termination date upon death surrender","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/exp_shiny.html","id":null,"dir":"Reference","previous_headings":"","what":"Interactively explore experience data — exp_shiny","title":"Interactively explore experience data — exp_shiny","text":"Launch shiny application interactively explore drivers experience. dat must exposed_df object. error thrown object type passed. nothing passed predictors, columns names dat used (excluding policy number, status, termination date, exposure columns). expected argument optional. default, column names containing word \"expected\" used.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/exp_shiny.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interactively explore experience data — exp_shiny","text":"","code":"exp_shiny(   dat,   predictors = names(dat),   expected = names(dat)[grepl(\"expected\", names(dat))],   distinct_max = 25L )"},{"path":"https://mattheaphy.github.io/actxps/reference/exp_shiny.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interactively explore experience data — exp_shiny","text":"dat exposed_df object. predictors character vector independent variables dat include shiny app. expected character vector expected values dat include shiny app. distinct_max Maximum number distinct values allowed predictors included \"Color\" \"Facets\" grouping variables. input prevents drawing overly complex plots. Default value = 25.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/exp_shiny.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interactively explore experience data — exp_shiny","text":"return value. function called side effect launching shiny application.","code":""},{"path":[]},{"path":"https://mattheaphy.github.io/actxps/reference/exp_shiny.html","id":"filters","dir":"Reference","previous_headings":"","what":"Filters","title":"Interactively explore experience data — exp_shiny","text":"sidebar contains filtering widgets variables passed predictors argument.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/exp_shiny.html","id":"variable-selection","dir":"Reference","previous_headings":"","what":"Variable Selection","title":"Interactively explore experience data — exp_shiny","text":"box includes widgets select grouping variables summarizing experience. \"x\" widget also used x variable plot output. Similarly, \"Color\" \"Facets\" widgets used color facets plot. Multiple faceting variables allowed. table output, \"x\", \"Color\", \"Facets\" particular meaning beyond order grouping variables displayed. expected values checkboxes used activate deactivate expected values passed expected argument. impacts table output directly available \"y\" variables plot. expected values available, widget appear. \"Weight \" widget used specify column, , contains weights summarizing experience.","code":""},{"path":[]},{"path":"https://mattheaphy.github.io/actxps/reference/exp_shiny.html","id":"plot-tab","dir":"Reference","previous_headings":"","what":"Plot Tab","title":"Interactively explore experience data — exp_shiny","text":"tab includes plot various options customization: y: y variable Geometry: plotting geometry Add Smoothing?: activate plot loess curves Free y Scales: activate enable separate y scales plot.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/exp_shiny.html","id":"table","dir":"Reference","previous_headings":"","what":"Table","title":"Interactively explore experience data — exp_shiny","text":"tab includes data table.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/exp_shiny.html","id":"export-data","dir":"Reference","previous_headings":"","what":"Export Data","title":"Interactively explore experience data — exp_shiny","text":"tab includes download button save copy summarized experience data.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/exp_shiny.html","id":"filter-information","dir":"Reference","previous_headings":"","what":"Filter Information","title":"Interactively explore experience data — exp_shiny","text":"box contains information original number exposure records, number records filters applied, percentage records retained.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/exp_shiny.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interactively explore experience data — exp_shiny","text":"","code":"if (interactive()) {   study_py <- expose_py(census_dat, \"2019-12-31\", target_status = \"Surrender\")   expected_table <- c(seq(0.005, 0.03, length.out = 10), 0.2, 0.15, rep(0.05, 3))    set.seed(123)   study_py <- study_py |>   dplyr::mutate(expected_1 = expected_table[pol_yr],                 expected_2 = ifelse(inc_guar, 0.015, 0.03))    exp_shiny(study_py) }"},{"path":"https://mattheaphy.github.io/actxps/reference/exp_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize experience study records — exp_stats","title":"Summarize experience study records — exp_stats","text":"Create summary data frame experience given target status.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/exp_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize experience study records — exp_stats","text":"","code":"exp_stats(   .data,   target_status = attr(.data, \"target_status\"),   expected,   col_exposure = \"exposure\",   col_status = \"status\",   wt = NULL,   credibility = FALSE,   cred_p = 0.95,   cred_r = 0.05 )  # S3 method for exp_df summary(object, ...)"},{"path":"https://mattheaphy.github.io/actxps/reference/exp_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize experience study records — exp_stats","text":".data data frame exposure-level records, ideally type exposed_df target_status character vector target status values expected character vector containing column names .data expected values col_exposure name column .data containing exposures col_status name column .data containing policy status wt Optional. Length 1 character vector. Name column .data containing weights use calculation claims, exposures, partial credibility. credibility whether output include partial credibility weights credibility-weighted decrement rates. cred_p confidence level Limited Fluctuation credibility method cred_r error tolerance Limited Fluctuation credibility method object exp_df object ... groups retain summary() called","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/exp_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize experience study records — exp_stats","text":"tibble class exp_df, tbl_df, tbl, data.frame. results include columns grouping variables, claims, exposures, observed decrement rates (q_obs). values passed expected, additional columns added expected decrements actual--expected ratios. credibility set TRUE, additional columns added partial credibility credibility-weighted decrement rates (assuming values passed expected).","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/exp_stats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize experience study records — exp_stats","text":".data grouped, resulting data frame contain one row per group. target_status provided, exp_stats() use target status .data class exposed_df. Otherwise, .data exposed_df object, status values except first level assumed. produce warning message.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/exp_stats.html","id":"expected-values","dir":"Reference","previous_headings":"","what":"Expected values","title":"Summarize experience study records — exp_stats","text":"expected argument optional. provided, argument must character vector values corresponding columns .data containing expected experience. one expected basis can provided.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/exp_stats.html","id":"credibility","dir":"Reference","previous_headings":"","what":"Credibility","title":"Summarize experience study records — exp_stats","text":"credibility set TRUE, output contain credibility column equal partial credibility estimate Limited Fluctuation credibility method (also known Classical Credibility) assuming binomial distribution claims.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/exp_stats.html","id":"summary-method","dir":"Reference","previous_headings":"","what":"summary() Method","title":"Summarize experience study records — exp_stats","text":"Applying summary() exp_df object re-summarize data retaining grouping variables passed \"dots\" (...).","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/exp_stats.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Summarize experience study records — exp_stats","text":"Herzog, Thomas (1999). Introduction Credibility Theory","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/exp_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize experience study records — exp_stats","text":"","code":"toy_census |> expose(\"2020-12-31\", target_status = \"Surrender\") |>     exp_stats() #> Experience study results #>  #>  Groups:   #>  Target status: Surrender  #>  Study range: 1900-01-01 to 2020-12-31  #>  #> # A tibble: 1 × 4 #>   n_claims claims exposure q_obs #> *    <int>  <int>    <dbl> <dbl> #> 1        0      0     31.4     0  exp_res <- census_dat |>            expose(\"2019-12-31\", target_status = \"Surrender\") |>            dplyr::group_by(pol_yr, inc_guar) |>            exp_stats()  exp_res #> Experience study results #>  #>  Groups: pol_yr, inc_guar  #>  Target status: Surrender  #>  Study range: 1900-01-01 to 2019-12-31  #>  #> # A tibble: 30 × 6 #>    pol_yr inc_guar n_claims claims exposure   q_obs #>  *  <int> <lgl>       <int>  <int>    <dbl>   <dbl> #>  1      1 FALSE          56     56    7720. 0.00725 #>  2      1 TRUE           46     46   11532. 0.00399 #>  3      2 FALSE          92     92    7103. 0.0130  #>  4      2 TRUE           68     68   10612. 0.00641 #>  5      3 FALSE          67     67    6447. 0.0104  #>  6      3 TRUE           57     57    9650. 0.00591 #>  7      4 FALSE         123    123    5799. 0.0212  #>  8      4 TRUE           45     45    8737. 0.00515 #>  9      5 FALSE          97     97    5106. 0.0190  #> 10      5 TRUE           67     67    7810. 0.00858 #> # … with 20 more rows summary(exp_res) #> Experience study results #>  #>  Groups:   #>  Target status: Surrender  #>  Study range: 1900-01-01 to 2019-12-31  #>  #> # A tibble: 1 × 4 #>   n_claims claims exposure  q_obs #> *    <int>  <int>    <dbl>  <dbl> #> 1     2869   2869  132634. 0.0216 summary(exp_res, inc_guar) #> Experience study results #>  #>  Groups: inc_guar  #>  Target status: Surrender  #>  Study range: 1900-01-01 to 2019-12-31  #>  #> # A tibble: 2 × 5 #>   inc_guar n_claims claims exposure  q_obs #> * <lgl>       <int>  <int>    <dbl>  <dbl> #> 1 FALSE        1601   1601   52123. 0.0307 #> 2 TRUE         1268   1268   80511. 0.0157"},{"path":"https://mattheaphy.github.io/actxps/reference/expose.html","id":null,"dir":"Reference","previous_headings":"","what":"Create exposure records from census records — expose","title":"Create exposure records from census records — expose","text":"Convert data frame census-level records exposure-level records.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/expose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create exposure records from census records — expose","text":"","code":"expose(   .data,   end_date,   start_date = as.Date(\"1900-01-01\"),   target_status = NULL,   cal_expo = FALSE,   expo_length = c(\"year\", \"quarter\", \"month\", \"week\"),   col_pol_num = \"pol_num\",   col_status = \"status\",   col_issue_date = \"issue_date\",   col_term_date = \"term_date\",   default_status )  expose_py(...)  expose_pq(...)  expose_pm(...)  expose_pw(...)  expose_cy(...)  expose_cq(...)  expose_cm(...)  expose_cw(...)"},{"path":"https://mattheaphy.github.io/actxps/reference/expose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create exposure records from census records — expose","text":".data data frame census-level records end_date experience study end date start_date experience study start date. Default value = 1900-01-01. target_status character vector target status values. Default value = NULL. cal_expo set TRUE calendar year exposures. Otherwise policy year exposures assumed. expo_length exposure period length col_pol_num name column .data containing policy number col_status name column .data containing policy status col_issue_date name column .data containing issue date col_term_date name column .data containing termination date default_status optional scalar character representing default active status code ... arguments passed expose()","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/expose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create exposure records from census records — expose","text":"tibble class exposed_df, tbl_df, tbl, data.frame. results include existing columns .data plus new columns exposures observation periods. Observation periods include counters policy exposures, start dates, end dates. start dates end dates inclusive bounds. policy year exposures, two observation period columns returned. Columns beginning (pol_) integer policy periods. Columns beginning (pol_date_) calendar dates representing anniversary dates, monthiversary dates, etc.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/expose.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create exposure records from census records — expose","text":"Census-level data refers data set wherein one row per unique policy. Exposure-level data expands census-level data one record per policy per observation period. Observation periods meaningful period time policy year, policy month, calendar year, calendar quarter, calendar month, etc. target_status used calculation exposures. annual exposure method applied, allocates full period exposure statuses target_status. statuses, new entrants exits partially exposed based time elapsed observation period. method consistent Balducci Hypothesis, assumes probability termination proportionate time elapsed observation period. annual exposure method desired, target_status can ignored. case, partial exposures always applied regardless status. default_status used indicate default active status used exposure records created. left blank, first status level assumed default active status.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/expose.html","id":"policy-period-and-calendar-period-variations","dir":"Reference","previous_headings":"","what":"Policy period and calendar period variations","title":"Create exposure records from census records — expose","text":"functions expose_py(), expose_pq(), expose_pm(), expose_pw(), expose_cy(), expose_cq(), expose_cm(), expose_cw() convenience functions specific implementations expose(). two characters underscore describe exposure type exposure period, respectively. exposures types: p refers policy years c refers calendar years. exposure periods: y = years q = quarters m = months w = weeks.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/expose.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create exposure records from census records — expose","text":"Atkinson McGarry (2016). Experience Study Calculations. https://www.soa.org/49378a/globalassets/assets/files/research/experience-study-calculations.pdf","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/expose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create exposure records from census records — expose","text":"","code":"toy_census |> expose(\"2020-12-31\") #> Exposure data #>  #>  Exposure type: policy_year  #>  Target status:   #>  Study range: 1900-01-01 to 2020-12-31  #>  #> # A tibble: 33 × 8 #>    pol_num status issue_date term_date pol_yr pol_date_yr pol_date_yr_…¹ expos…² #>  *   <int> <fct>  <date>     <date>     <int> <date>      <date>           <dbl> #>  1       1 Active 2010-01-01 NA             1 2010-01-01  2010-12-31           1 #>  2       1 Active 2010-01-01 NA             2 2011-01-01  2011-12-31           1 #>  3       1 Active 2010-01-01 NA             3 2012-01-01  2012-12-31           1 #>  4       1 Active 2010-01-01 NA             4 2013-01-01  2013-12-31           1 #>  5       1 Active 2010-01-01 NA             5 2014-01-01  2014-12-31           1 #>  6       1 Active 2010-01-01 NA             6 2015-01-01  2015-12-31           1 #>  7       1 Active 2010-01-01 NA             7 2016-01-01  2016-12-31           1 #>  8       1 Active 2010-01-01 NA             8 2017-01-01  2017-12-31           1 #>  9       1 Active 2010-01-01 NA             9 2018-01-01  2018-12-31           1 #> 10       1 Active 2010-01-01 NA            10 2019-01-01  2019-12-31           1 #> # … with 23 more rows, and abbreviated variable names ¹​pol_date_yr_end, #> #   ²​exposure  census_dat |> expose_py(\"2019-12-31\", target_status = \"Surrender\") #> Exposure data #>  #>  Exposure type: policy_year  #>  Target status: Surrender  #>  Study range: 1900-01-01 to 2019-12-31  #>  #> # A tibble: 141,252 × 15 #>    pol_num status issue_date inc_guar qual    age product gender wd_age pol_val #>  *   <int> <fct>  <date>     <lgl>    <lgl> <int> <fct>   <fct>   <int>   <dbl> #>  1       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  2       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  3       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  4       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  5       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  6       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  7       2 Active 2007-09-24 FALSE    FALSE    71 a       F          71     708 #>  8       2 Active 2007-09-24 FALSE    FALSE    71 a       F          71     708 #>  9       2 Active 2007-09-24 FALSE    FALSE    71 a       F          71     708 #> 10       2 Active 2007-09-24 FALSE    FALSE    71 a       F          71     708 #> # … with 141,242 more rows, and 5 more variables: term_date <date>, #> #   pol_yr <int>, pol_date_yr <date>, pol_date_yr_end <date>, exposure <dbl>"},{"path":"https://mattheaphy.github.io/actxps/reference/is_exposed_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Exposed data frame helper functions — is_exposed_df","title":"Exposed data frame helper functions — is_exposed_df","text":"Test coerce exposed_df class.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/is_exposed_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exposed data frame helper functions — is_exposed_df","text":"","code":"is_exposed_df(x)  as_exposed_df(   x,   end_date,   start_date = as.Date(\"1900-01-01\"),   target_status = NULL,   cal_expo = FALSE,   expo_length = \"year\" )"},{"path":"https://mattheaphy.github.io/actxps/reference/is_exposed_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exposed data frame helper functions — is_exposed_df","text":"x object. x must data frame calling as_exposed_df() end_date experience study end date start_date experience study start date. Default value = 1900-01-01. target_status character vector target status values. Default value = NULL. cal_expo set TRUE calendar year exposures. Otherwise policy year exposures assumed. expo_length exposure period length","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/is_exposed_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exposed data frame helper functions — is_exposed_df","text":"is_exposed_df(), length-1 logical vector. as_exposed_df(), exposed_df object.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/is_exposed_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Exposed data frame helper functions — is_exposed_df","text":"behind--scenes functions generally called users. is_exposed_df() return TRUE x exposed_df object. as_exposed_df() coerce data frame exposed_df object.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/qx_iamb.html","id":null,"dir":"Reference","previous_headings":"","what":"2012 Individual Annuity Mortality Table and Projection Scale G2 — qx_iamb","title":"2012 Individual Annuity Mortality Table and Projection Scale G2 — qx_iamb","text":"Mortality rates mortality improvement rates 2012 Individual Annuity Mortality Basic (IAMB) Table Project Scale G2.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/qx_iamb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"2012 Individual Annuity Mortality Table and Projection Scale G2 — qx_iamb","text":"","code":"qx_iamb  scale_g2"},{"path":"https://mattheaphy.github.io/actxps/reference/qx_iamb.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"2012 Individual Annuity Mortality Table and Projection Scale G2 — qx_iamb","text":"2012 IAMB table, data frame 242 rows 3 columns: age attained age qx mortality rate gender Female Male Project Scale G2 table, data frame 242 rows 3 columns: age attained age mi mortality improvement rate gender Female Male","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/qx_iamb.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"2012 Individual Annuity Mortality Table and Projection Scale G2 — qx_iamb","text":"https://mort.soa.org/ https://www.actuary.org/sites/default/files/files/publications/Payout_Annuity_Report_09-28-11.pdf","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr groups generics tidy ggplot2 autoplot recipes bake, prep","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/step_expose.html","id":null,"dir":"Reference","previous_headings":"","what":"Create exposure records in a recipes step — step_expose","title":"Create exposure records in a recipes step — step_expose","text":"step_expose() creates specification recipe step convert data frame census-level records exposure-level records.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/step_expose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create exposure records in a recipes step — step_expose","text":"","code":"step_expose(   recipe,   ...,   role = NA,   trained = FALSE,   end_date,   start_date = as.Date(\"1900-01-01\"),   target_status = NULL,   options = list(cal_expo = FALSE, expo_length = \"year\"),   drop_pol_num = TRUE,   skip = TRUE,   id = recipes::rand_id(\"expose\") )"},{"path":"https://mattheaphy.github.io/actxps/reference/step_expose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create exposure records in a recipes step — step_expose","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. end_date experience study end date start_date experience study start date. Default value = 1900-01-01. target_status character vector target status values. Default value = NULL. options named list additional arguments passed expose(). drop_pol_num Whether pol_num column produced expose() dropped. Defaults TRUE. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/step_expose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create exposure records in a recipes step — step_expose","text":"updated version recipe new expose step added sequence existing operations. tidy method, tibble columns exposure_type, target_status, start_date, end_date.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/step_expose.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create exposure records in a recipes step — step_expose","text":"Policy year exposures calculated default. switch calendar exposures another exposure length, use pass appropriate arguments options parameter. Policy numbers dropped default whenever recipe baked. done prevent unintentional errors model formula includes variables (y ~ .). policy numbers required reason (mixed effect models, identification, etc.), set drop_pol_num FALSE.","code":""},{"path":[]},{"path":"https://mattheaphy.github.io/actxps/reference/step_expose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create exposure records in a recipes step — step_expose","text":"","code":"expo_rec <- recipes::recipe(status ~ ., toy_census) |>   step_expose(end_date = \"2022-12-31\", target_status = \"Surrender\",               options = list(expo_length = \"month\")) |>   prep()  recipes::juice(expo_rec) #> # A tibble: 416 × 7 #>    issue_date term_date status pol_mth pol_date_mth pol_date_mth_end exposure #>    <date>     <date>    <fct>    <int> <date>       <date>              <dbl> #>  1 2010-01-01 NA        Active       1 2010-01-01   2010-01-31              1 #>  2 2010-01-01 NA        Active       2 2010-02-01   2010-02-28              1 #>  3 2010-01-01 NA        Active       3 2010-03-01   2010-03-31              1 #>  4 2010-01-01 NA        Active       4 2010-04-01   2010-04-30              1 #>  5 2010-01-01 NA        Active       5 2010-05-01   2010-05-31              1 #>  6 2010-01-01 NA        Active       6 2010-06-01   2010-06-30              1 #>  7 2010-01-01 NA        Active       7 2010-07-01   2010-07-31              1 #>  8 2010-01-01 NA        Active       8 2010-08-01   2010-08-31              1 #>  9 2010-01-01 NA        Active       9 2010-09-01   2010-09-30              1 #> 10 2010-01-01 NA        Active      10 2010-10-01   2010-10-31              1 #> # … with 406 more rows"},{"path":"https://mattheaphy.github.io/actxps/reference/toy_census.html","id":null,"dir":"Reference","previous_headings":"","what":"Toy policy census data — toy_census","title":"Toy policy census data — toy_census","text":"tiny dataset containing 3 policies: one active, one terminated due death, one terminated due surrender.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/toy_census.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Toy policy census data — toy_census","text":"","code":"toy_census"},{"path":"https://mattheaphy.github.io/actxps/reference/toy_census.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Toy policy census data — toy_census","text":"data frame 3 rows 4 columns: pol_num policy number status policy status issue_date issue date term_date termination date","code":""},{"path":"https://mattheaphy.github.io/actxps/news/index.html","id":"actxps-021","dir":"Changelog","previous_headings":"","what":"actxps 0.2.1","title":"actxps 0.2.1","text":"expose() functions now include new column period end dates. Fixed issues expose() dropping records: Handling leap days / years Correction date addition always rollback dates last day month. Fixed 2 R CMD check problems.","code":""},{"path":"https://mattheaphy.github.io/actxps/news/index.html","id":"actxps-020","dir":"Changelog","previous_headings":"","what":"actxps 0.2.0","title":"actxps 0.2.0","text":"CRAN release: 2022-08-31 First version submitted CRAN. Added exp_shiny() function.","code":""},{"path":"https://mattheaphy.github.io/actxps/news/index.html","id":"actxps-010","dir":"Changelog","previous_headings":"","what":"actxps 0.1.0","title":"actxps 0.1.0","text":"Added step_expose() recipe step function.","code":""},{"path":"https://mattheaphy.github.io/actxps/news/index.html","id":"actxps-009000","dir":"Changelog","previous_headings":"","what":"actxps 0.0.9000","title":"actxps 0.0.9000","text":"First developmental version","code":""}]
